name: Beta builds

on:
  workflow_dispatch:

jobs:
  build-data:
    name: Generate build data
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.data.outputs.shortsha }}
      build_date: ${{ steps.data.outputs.builddate }}
      upstream: ${{ steps.data.outputs.upstream }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup melon
        run: yarn

      - name: Export release data
        id: data
        shell: bash
        run: |
          echo "::set-output name=shortsha::$(git rev-parse --short HEAD)"
          echo "::set-output name=builddate::$(date +"%Y-%m-%d")"
          echo "::set-output name=upstream::$(yarn melon ff-version)"

  linux:
    runs-on: ubuntu-latest
    needs: [build-data]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup git
        run: |
          git config --global user.email "trickypr@users.noreply.github.com"
          git config --global user.name "TrickyPR"

      - name: Install system dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get update
          sudo apt-get install dos2unix yasm nasm build-essential libgtk2.0-dev libpython3-dev m4 uuid libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdrm-dev libdbus-glib-1-dev libdbus-glib-1-dev libgtk-3-dev libpulse-dev libx11-xcb-dev libxt-dev xvfb lld-10 llvm
          pip install pycairo testresources

          echo "/usr/lib/llvm-10/bin" >> $GITHUB_PATH

      - name: Install WASI SDK
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/wasi-sdk_14.0_amd64.deb
          sudo apt install ./wasi-sdk_14.0_amd64.deb

      - name: Install libclang builtins
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/libclang_rt.builtins-wasm32-wasi-14.0.tar.gz
          sudo tar -xf libclang_rt.builtins-wasm32-wasi-14.0.tar.gz --strip-components=1 -C /usr/lib/llvm-10/lib/clang/10.0.0/lib/

      - name: Disable wasm sandboxing for the sake of my sanity
        run: |
          echo "ac_add_options --without-wasm-sandboxed-libraries" >> mozconfig

      - name: Use 1 thread to reduce memory usage
        run: |
          echo "mk_add_options MOZ_MAKE_FLAGS=\"-j1\"" >> mozconfig

      - name: Use beta branding
        run: |
          echo "ac_add_options --with-branding=browser/branding/beta" >> mozconfig

      - name: Optimise for modern hardware
        run: |
          echo "ac_add_options --disable-debug" >> mozconfig
          echo 'ac_add_options --enable-optimize="-O3 -march=haswell -mtune=haswell -w"' >> mozconfig
          echo "ac_add_options --enable-rust-simd" >> mozconfig
          echo "ac_add_options --enable-release" >> mozconfig

          cat mozconfig

      - name: Free up space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Install sccache
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ needs.build-data.outputs.upstream }}

      - name: Get System Info
        run: |
          llc --version
          ls /usr/lib/llvm-10/bin
          wasm-ld --version
          cargo --version
          ls /opt/wasi-sdk/share/wasi-sysroot

      - name: Setup melon
        run: yarn

      - name: Download firefox source and dependancies
        run: yarn download

      - name: Import
        run: yarn imp

      - name: Bootstrap
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Build
        run: yarn build

      - name: Package
        run: yarn melon package

      - name: Rename artifacts
        run: |
          cp ./engine/obj-*/dist/pulse-browser-*.tar.bz2 .
          mv pulse-browser-*.tar.bz2 "pulse-browser.linux.tar.bz2"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: pulse-browser.linux.tar.bz2
          path: ./pulse-browser.linux.tar.bz2

  flatpak:
    name: ðŸ“¦ Flatpak
    needs: [build-data, linux]
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-3.38
      options: --privileged

    steps:
      - name: Clone packaging scripts
        run: git clone --recurse-submodules https://github.com/pulse-browser/packages.git

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - uses: actions/download-artifact@v4.1.7
        with:
          name: pulse-browser.linux.tar.bz2

      - name: Setup git
        run: |
          git config --global user.email "trickypr@users.noreply.github.com"
          git config --global user.name "TrickyPR"

      - name: Display structure of downloaded files
        run: ls -R

      - name: Save flatpak cache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ./packages/flatpak/.flatpak-builder/cache
          key: ${{ runner.os }}-flatpak-${{ needs.build-data.outputs.shortsha }}
          restore-keys: |
            ${{ runner.os }}-flatpak-

      - name: Download binaries
        run: |
          cd packages/flatpak
          cp ../../pulse-browser.linux.tar.bz2 ./pulse-browser.tar.bz2
          tar -xvf pulse-browser.tar.bz2
      - uses: bilelmoussaoui/flatpak-github-actions@v2
        with:
          bundle: pulse-browser.linux.flatpak
          manifest-path: './packages/flatpak/com.fushra.browser.desktop.yml'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: pulse-browser.linux.flatpak
          path: ./pulse-browser.linux.flatpak

      - name: Import GPG key
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Build for Alpha repo
        run: |
          export deploy_acc_key=$TRICKYPR_TOKEN
          cd packages/flatpak
          chmod +x ./build.sh
          ./build.sh

      - name: Push to flatpak repo
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TRICKYPR_TOKEN }}
          directory: './packages/flatpak/repo/'
          repository: 'pulse-browser/repo'

  mac:
    runs-on: macos-latest
    needs: [build-data]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup git
        run: |
          git config --global user.email "trickypr@users.noreply.github.com"
          git config --global user.name "TrickyPR"

      - name: Install system dependencies
        run: |
          brew install cairo sccache gnu-tar
          pip3 install pycairo testresources

      - name: Force usage fo gnu-tar
        run: |
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.zsh
          source ~/.bash_profile

      - name: Save sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-sccache-${{ needs.build-data.outputs.upstream }}

      - name: Use beta branding
        run: |
          echo "ac_add_options --with-branding=browser/branding/beta" >> mozconfig

      - name: Use 2 thread to reduce memory usage
        run: |
          echo "mk_add_options MOZ_MAKE_FLAGS=\"-j2\"" >> mozconfig

      - name: Optimise for modern hardware
        run: |
          echo "ac_add_options --disable-debug" >> mozconfig
          echo "ac_add_options --enable-release" >> mozconfig
          echo 'ac_add_options --enable-optimize="-O3 -march=nehalem -mtune=haswell -w"' >> mozconfig
          echo "ac_add_options --enable-rust-simd" >> mozconfig

          cat mozconfig

      - name: Get System Info
        run: |
          cargo --version

      - name: Setup melon
        run: yarn

      - name: Download firefox source and dependancies
        run: yarn download

      - name: Import
        run: yarn imp

      - name: Bootstrap
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Build
        run: yarn build

      - name: Package
        run: yarn melon package

      - name: Rename artifacts
        run: |
          find ./engine/obj-*/dist/
          cp ./engine/obj-*/dist/*.dmg .
          mv *.dmg "pulse-browser.macos.dmg"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: pulse-browser.macos.dmg
          path: ./pulse-browser.macos.dmg

  source:
    runs-on: ubuntu-latest
    needs: [build-data]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup git
        run: |
          git config --global user.email "trickypr@users.noreply.github.com"
          git config --global user.name "TrickyPR"

      - name: Setup melon
        run: yarn

      - name: Download firefox source and dependancies
        run: yarn download

      - name: Import
        run: yarn imp

      - name: Compress
        run: |
          cd engine
          tar -czvf ../pulse-browser.source.tar.gz *
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: pulse-browser.source.tar.gz
          path: ./pulse-browser.source.tar.gz

  release:
    name: Release
    needs: [build-data, linux, flatpak, source, mac]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.7

      - name: release-github
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: 'beta-${{ needs.build-data.outputs.build_date }}'
          prerelease: true
          title: 'Beta build'
          files: |
            pulse-browser.linux.flatpak 
            pulse-browser.linux.tar.bz2
            pulse-browser.source.tar.gz
            pulse-browser.macos.dmg
